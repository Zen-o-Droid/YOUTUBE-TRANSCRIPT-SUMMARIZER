Hindi Transcript:
इसलिए जब मैं झरना कहता हूं तो आप किसी ऐसी चीज के बारे में सोच सकते हैं जैसे आप एक बैंकिंग एप्लिकेशन या बीमा आवेदन या कुछ पुलिस विभाग के आवेदन को जानते हैं, इसलिए जिस क्षण मैं कहता हूं कि वाटरफॉल मॉडल आप वास्तव में एक विशाल आवेदन की तरह सोच सकते हैं, जिसे आप जानते हैं उदाहरण के लिए कोड इस एप्लिकेशन का फ्रंट-एंड हो सकता है कि इस एप्लिकेशन में स्पष्ट रूप से बैक-एंड होगा और फिर इसमें कुछ DNS मार्ग और कुछ सेवाएं हैं जो इस पर निर्भर हैं, इसलिए यह वास्तव में कोई फर्क नहीं पड़ता कि इस एप्लिकेशन की कितनी सेवाएं हैं लेकिन इस पूरे एप्लिकेशन को एक-होल एप्लिकेशन के रूप में भेज दिया गया था कि वे दिन में वापस कैसे हुए करते थे और यह संदर्भित किया गया था या विकास की इस विधि को जलप्रपात विधि के रूप में संदर्भित किया गया था। इसे ठीक से मोनोलिथिक एप्लिकेशन लिख सकते हैं अब आप जानते हैं ग्राहकों की दस अलग -अलग आवश्यकताएं होंगी जो लगभग हर दिन बदल जाएंगी यदि आपके पास एक एकल एप्लिकेशन है, तो आपके पास विफलता का एक भी बिंदु है, इसलिए यदि हम इस एप्लिकेशन के इस अंग को भी बदल रहे हैं और यदि यह हिस्सा इस पूरे आवेदन को विफल करना है तो यह पूरी तरह से बंद हो जाएगा काम करना जब लोगों ने सॉफ्टवेयर विकास के लिए बेहतर दृष्टिकोण के बारे में विचार -मंथन करना शुरू कर दिया और आप आज की दुनिया की सहस्राब्दी की आवश्यकताओं को कैसे पूरा कर सकते हैं - वास्तव में प्रभावित किए बिना कि सॉफ्टवेयर कैसे लिखा जाता है या किसी भी एप्लिकेशन को पहली जगह में लिखा जाता है, जहां फुर्तीली के विचार हैं। विकास तस्वीर में आया था ताकि समस्या का एक हिस्सा समस्या का दूसरा भाग था क्योंकि यह एक अखंड अनुप्रयोग था कि यह वास्तव में परिवर्तनों को धक्का देने के लिए आवश्यक है, उदाहरण के लिए मान लें कि आपके पास एक आवेदन है और अपने उत्पादन में चल रहा है पर्यावरण और आपकी विकास टीम ने वास्तव में एक नई सुविधा बनाई है या वे मौजूदा सुविधा को संशोधित करते हैं जो अब सुविधा है इस समस्या के दूसरे भाग में जाने के लिए माना जाता है कि लोग हल करने की कोशिश कर रहे थे, जब एजाइल तस्वीर में आया था तो अब सरल शब्दों में फुर्तीली एक दर्शन है जो तेजी से एक एप्लिकेशन को और अधिक संगठित तरीके से तैनात करने के लिए एक दर्शन है। अब स्पष्ट रूप से बहुत अधिक विवरण है। आंख से मिलती है, लेकिन एक साधारण वाक्य में यह है कि आप एक जार से मतलब है कि आप सॉफ्टवेयर की तेजी से तैनाती चाहते हैं या जिस कोड को आप लिखते हैं, उसी समय लंबे समय तक इंतजार करने के लिए आप यह सुनिश्चित करना चाहते हैं कि आपके पास छोटा है कोड के विखंडन को क्लाइंट पर भेज दिया जा सकता है या जिस भी एप्लिकेशन के साथ आप काम कर रहे हैं, उसी कारण राजल आज मौजूद हैं और अब हम यह देखने जा रहे हैं कि आप चुस्त से क्या मतलब रखते हैं और आप वास्तव में इसे कैसे लागू कर सकते हैं तो यह वही है जो पिछले चार दशकों से हो रहा है, लेकिन यह वास्तव में आज की दुनिया में नहीं उड़ेगा क्योंकि हर एक दिन में कई बदलाव किए जा रहे हैं ताकि आप वास्तव में थोड़े से बदलाव के लिए योजना के महीनों से गुजर सकें।जिस तरह से एप्लिकेशन विकसित किए जाते हैं, वे बदल गए हैं और इस तरह से एप्लिकेशन को तैनात किया जाता है, इसलिए इसका मतलब यह है कि वाटरफॉल मॉडल से अब मुझे लगता है कि मैंने इसे बहुत अच्छी तरह से समझाया है कि बहुत सारी कंपनियां हैं जो अभी भी इस मॉडल का अनुसरण करती हैं लेकिन दिन के अंत में दिन के अंत मेंवे सभी आप के लिए कोशिश कर रहे हैं कि एक अधिक चुस्त विकास के लिए पलायन करें यह कंपनी के आकार के आधार पर इतना आसान नहीं है और आप इसकी समीक्षा करते हैं यदि आप नोटिस करते हैं कि लॉन्च वास्तव में इस पूरे सर्कल के बाहर है, तो हर बार जब आप एक बदलाव करते हैं तो यह कुछ के रूप में सरल हो सकता है क्योंकि कोड की सिर्फ एक पंक्ति में बदलाव किया जा सकता है, बस इसका नाम बदल दिया जा रहा है, इसलिए यह कोई फर्क नहीं पड़ता कि कितना छोटा या कितना बड़ा है परिवर्तन यह विचार वह क्षण है जब परिवर्तन किया जाता है इसे एक देव वातावरण में भी तैनात किया जाना है ताकि आप उस कोड के साथ क्या हो रहा है, इस पर एक निरंतर प्रतिक्रिया प्राप्त कर सकें जो आपने कल्पना की है कि क्या आपको वास्तव में एक या दो महीने के लिए इंतजार करना था सप्ताह बस इस पर प्रतिक्रिया प्राप्त करने के लिए यदि आप वास्तव में उस परिवर्तन को चाहते हैं या नहीं, तो यह थोड़ा कष्टप्रद हो सकता है या डेवलपर्स के दृष्टिकोण से निराशा हो सकती है कि मैं यह नहीं कह रहा हूं कि आपका पूरा एप्लिकेशन बदल रहा है जो मैं कह रहा हूं कि मॉडल सुंदर है बहुत से लोग सेंट्रिक टीम और ग्राहकों और अंतिम उपयोगकर्ताओं को पसंद करते हैं और व्यापक प्रलेखन पर अंतिम उपयोगकर्ताओं को अधिक महत्व और काम करने वाले सॉफ्टवेयर दिए जाते हैं, यह कुछ ऐसा है जो हम सभी ने किसी समय में कुछ समय पर देखा होगा। सही तो प्रत्येक एप्लिकेशन में एक आंतरिक दस्तावेज होगा कि सभी वर्ग के बारे में सभी तरीकों के बारे में 100 पृष्ठ 150 पृष्ठ कितने समय तक होते हैं, तो आवेदन क्यों बनाया जा रहा है, तो आवेदन क्यों बनाया जा रहा है इस बारे में भी चिंतित नहीं है कि आपको इस बारे में चिंतित हैं कि आपको क्या बनाना है और आप उस विकास कार्य में कितनी दूर हैं, इसलिए चुस्त में कार्यात्मक अनुप्रयोग को प्रलेखन की तुलना में बहुत अधिक महत्व दिया जाता है क्योंकि यदि आप इसके बारे में सोचते हैं तो कोड ही एक प्रलेखन है। यदि आप जानते हैं कि कोड की व्याख्या कैसे करें तो आप कोड को कैसे देख सकते हैं और यह एक प्रलेखन के रूप में भी कार्य कर सकता है, इसलिए मैं यह नहीं कह रहा हूं कि कोई भी दस्तावेज नहीं होगा जो मैं कह रहा हूं कि विकास को अधिक महत्व दिया गया है। प्रलेखन भाग और फिर यह आपको शॉपिंग कार्ट नामक किसी चीज़ में ले जाने वाला है और आपके द्वारा भुगतान किए जाने के बाद और उन सभी चीजों को जो आपके पास ईमेल सूचनाएं हैं और आप जानते हैं कि पाठ सूचनाएं यहां हैं, भले ही ये सभी चीजें तालमेल में काम कर रही हों, वे वास्तव में पूरी तरह से पूरी तरह से हैं अंतर्निहित वास्तुकला में अलग -अलग सेवाएं पूरी तरह से अलग -अलग कार्यों को पूरी तरह से अलग करती हैं, इसलिए अगर मैं सामने के छोर पर कुछ काम कर रहा हूं तो मुझे वास्तव में कैटलॉग और खरीदारी के बारे में चिंतित नहीं होना चाहिए क्योंकि पहले मुझे लॉन्च होने से पहले भी एक निरंतर प्रतिक्रिया मिल रही है एक बार जब हम आपके कोड को एक ही समय में उत्पादन के लिए लॉन्च करते हैं, इसके बारे में एक प्रतिक्रिया मुझे वास्तव में डरने की ज़रूरत नहीं है कि यह मेरे पूरे एप्लिकेशन को तोड़ने वाला है क्योंकि उन सभी को अलग-अलग सूक्ष्म सेवाओं के रूप में विकसित किया जाता है, तो आपकी एक सेवा कभी नहीं होगी एक और सेवा को प्रभावित करें निश्चित रूप से आश्रित सेवाएं प्रभावित हो सकती हैं, लेकिन विचार यह है कि आप वास्तव में कभी भी विफलता का एक भी बिंदु नहीं चाहते हैं जो कि एक जार का विचार है अब चलो चलते हैं e आगे अब हमारी नौकरी के शब्द और मूल्य क्या हैं और फिर ग्राहक को कठोर अनुबंधों पर सहयोग करना और योजना का पालन करने के बजाय परिवर्तन का जवाब देना, इसलिए चुस्त वास्तव में प्रतिक्रिया पर निर्भर है जिस दिन आप जानते हैं कि प्रबंधकों और उत्पाद मालिकों के पास होगा कई बैठकें वे उस तरह के सॉफ़्टवेयर के साथ आएंगे जो उन्होंने सब कुछ खरीदा है, तीन चार महीनों की तरह चर्चा की जाएगी और फिर लोग योजना से चिपके रहना चाहते हैं क्योंकि आपने पहले से ही चार महीने बिताए हैं यदि आप भी इस बात की योजना बना रहे हैं तो आप भी बदलना चाहते हैं इस पूरी बैठकों और योजना का एक छोटा सा हिस्सा फिर से पूरी तरह से किया जाना चाहिए अब चुस्त में बदलाव है कि एजाइल प्रतिक्रिया पर अधिक काम करता है क्योंकि योजना बनाई गई है इसका मतलब यह नहीं है कि कोई भी बदलाव नहीं हो सकता क्योंकि आपने चीजों को तोड़ा है कार्यों के छोटे हिस्से में नीचे किसी भी कार्य को किसी भी समय आवश्यकताओं के अनुसार संशोधित किया जा सकता है, इसलिए ये वे मूल्य हैं जो फुर्तीली तालिका में लाते हैं लेकिन यह वास्तव में ऐसा नहीं है कि हम वास्तव में यह देखने जा रहे हैं कि यह सब कैसे भौतिक होता है जैसे आप भविष्य की स्लाइड्स पर जानते हैं जब हम वास्तव में बात करते हैं कि आप काम करने या उस टीम में नौकरी कैसे लागू कर सकते हैं, जिसके साथ आप काम कर रहे हैं तो चलोफुर्तीले के बारे में अधिक जानकारी अब आप बहुत ज्यादा जानते हैं कि आप इन सभी चीजों पर स्पर्श करते हैं, अब के लिए इन सभी चीजों पर स्पर्श किया गया है।अब आपके पास फारस का एक मूल विचार है, लेकिन यह सवाल है कि हर किसी के पास किसी भी समय है जो मेरे लिए है और फिर उनके पास अपना स्वयं का दर्शन होता है जो उनके संगठन के लिए काम करता है, लेकिन स्क्रैम वह है जो अधिकांश लोगों द्वारा उपयोग किया जाता है, इसलिए स्लाइड को देखने से पहले आप जानते हैं कि हम जो हम स्लाइड में देखते हैं उससे गुजरते हैं आप जिस तरह से मुझे सही जानते हैं, उसे समझाएं क्योंकि मैंने कई विकास टीमों के साथ काम किया है जो मैंने इनमें से अधिकांश को लागू किया है और मुझे पता है कि उनमें से प्रत्येक वास्तविक दुनिया के उदाहरण में कैसे काम करता है, इसलिए क्या स्क्रैम है इसलिए स्क्रैम मूल रूप से एक पुनरावृत्ति है दर्शन का अर्थ है कि आप उन परिवर्तनों पर व्यापार करते हैं जो आप एक बार में तैनाती और सॉफ्टवेयर विकास पर व्यापार करते हैं, इसलिए यदि आप स्क्रम के बारे में बात करना चाहते हैं तो योजना का एक पुनरावृत्ति है, फिर कैस का निर्माण करें और फिर अब समीक्षा करें कि आप लगातार सभी पर पुनरावृत्ति करेंगे इन पहलुओं में से अब मुझे इसका क्या मतलब है, तो आइए पहले देखें कि स्क्रैम कार्यान्वित टीम को कैसे या क्या दिखता है, स्क्रैम कार्यान्वित टीम में आपके पास पहला व्यक्ति है जिसे मैं किसी के बारे में बात करना चाहता हूं आरएस उत्पाद स्वामी अब जब मैं कहता हूं कि उत्पाद स्वामी यदि आप से आ रहे हैं तो आप एक पारंपरिक सॉफ्टवेयर विकास वातावरण के बारे में अधिक जानते हैं, आप एक उत्पाद के मालिक के बारे में सोच सकते हैं एक प्रबंधक के रूप में वह वह आदमी है जो यह सुनिश्चित करने की जिम्मेदारी रखता है कि आवेदन तैनात है जैसा कि और जब एक ही समय में प्रतिबद्ध किया जाता है तो आवेदन ठीक उसी तरह से बनाया जाता है जिस तरह से इसे बनाया जाना है इसलिए उत्पाद स्वामी उन विचारों के साथ लड़का है जो जरूरी नहीं कि एक तकनीकी व्यक्ति हो, वह प्रबंधन से एक आदमी हो सकता है जो वह करता है। जरूरी नहीं कि विकास या तकनीकी को विस्तार से जानना होगा कि वह विचार के साथ लड़का है और आवेदन का मालिक है जिसे विकसित किया जाएगा, सभी जवाबदेही उस पर निहित है और फिर कोई है जिसे स्क्रम मास्टर कहा जाता है कोई ऐसा व्यक्ति जिसे आप पारंपरिक रूप से एक टीम लीडर या एक प्रोजेक्ट ओनर के रूप में संदर्भित करते हैं, अब आप पदानुक्रमित अर्थ में टीम लीडर के रूप में स्क्रम मास्टर के बारे में सोच सकते हैं। यह वह व्यक्ति है जो नीचे सही है उत्पाद स्वामी और यह वह व्यक्ति है जो वास्तव में डेटा करता है या दिन-प्रतिदिन के संचालन को संभालता है जैसे आप जानते हैं कि बैठकें चलाना या उन कार्यों को सौंपना है जो किया जाना है और फिर आपके पास टीम है जिसमें आपके डेवलपर्स शामिल होंगे और परीक्षकों और आप जानते हैं कि आपकी आवश्यकता के आधार पर इसमें कुछ और भूमिकाएँ हो सकती हैं, लेकिन फिर आपके पास वास्तविक टीम है, लेकिन हम कार्यों को निष्पादित करेंगे, इसलिए ये तीन भूमिकाएं हैं जो आपके पास हैं लेकिन अब हम उन लोगों को जानते हैं जो शामिल हैं वास्तव में यह काम करता है मेरा मतलब है कि यह आपके कार्यालय में जो कुछ भी करता है, उसके समान दिखता है यह सिर्फ फैंसी नाम है तो यह कैसे किसी भी तरह से आपके कार्यालय में क्या करना है, इसलिए यह है कि हम अब जो देखना चाहते हैं, मुझे उम्मीद है कि भूमिकाएं आपके लिए स्पष्ट हैं कि अब आपके पास भूमिकाएँ हुई हैं, आइए विकास के बारे में पहली बात को देखें तो विकास का पहला हिस्सा जिसे हम देखना चाहते हैं, उसे उत्पाद बैकलॉग कहा जाता है, जहां अब चीजें थोड़ी अलग होने लगती हैं कि आप पारंपरिक वातावरण में अब एक पारंपरिक वातावरण में कैसे काम कर रहे हैं, आपके पास एक आवेदन है जो पहले से ही योजनाबद्ध है। महीनों के लिए और आप दूसरों के साथ आवेदन को तैनात करने पर काम कर रहे हैं, लेकिन मुझे आशा है कि आपको लगता है कि इसे स्प्रिंट कहा जाता है अब अलग हैं आप उन्हें समारोह या अनुष्ठान कह सकते हैं, लेकिन कुछ ऐसा है जिसे स्प्रिंट प्लानिंग कहा जाता है, अब स्प्रिंट प्लानिंग फिर से यह सिर्फ एक फैंसी है उत्पाद स्वामी की योजना बनाने के दौरान आपके पास जो कुछ भी है, उसके लिए नाम और चर्चा के लिए नाम वास्तव में समझाएगा कि वह आवेदन के लिए अंतिम लक्ष्य या उत्पाद को देखने के लिए कैसे कल्पना करता है जैसे कि आपके पास एक स्प्रिंट प्लानिंग नामक कुछ है जो आपके पास कुछ है जिसे इसका दैनिक स्क्रैम कहा जाता है, अब दैनिक स्क्रम कुछ भी नहीं है, जितना आप जानते हैं कि 15 मिनट की बैठक जो हर दिन होती है, जहां डेवलपर्स और परीक्षक और कोई अन्य भूमिका जो आपके पास खेल में हो सकती है वास्तव में चर्चा करें कि क्या हुआ और आप कहां खड़े हैं यदि आपको किसी भी तरह की मदद की आवश्यकता है और आप आज या कल क्या करने की योजना बनाते हैं और फिर कुछ स्प्रिंट समीक्षा कहा जाता है तो स्प्रिंट समीक्षा वास्तव में उपयोगकर्ता की कहानी या लड़ाई के अंत में होती है आप इन उपयोगकर्ताओं की कहानियों में से प्रत्येक पर काम कर रहे हैं, जो कि वे आमतौर पर दो सप्ताह की समयरेखा के साथ डिज़ाइन किए जाते हैं, अब कुछ कंपनियां स्प्रिंट की अलग -अलग हो सकती हैं जैसे कि यह दो सप्ताह से चार सप्ताह हो सकता है लेकिन अधिकांश में अधिकांश प्रत्येक स्प्रिंट दो सप्ताह तक चलेगा ताकि आप जान सकें कि आप अगले दो हफ्तों के लिए क्या करने वाले हैं, दो सप्ताह के अंत में अब आप जानते हैं NT पूरा हो गया है आपके पास एक स्प्रिंट समीक्षा है इसलिए तार्किक रूप से मैं अपने भुगतान प्रोसेसर पर अपने फ्रंट-एंड को प्राथमिकता देना चाहता हूं, इसलिए स्क्रैम मास्टर और उत्पाद स्वामी उन उपयोगकर्ता कहानियों को प्राथमिकता देंगे जो आपके पास हैं और उन प्राथमिकताओं के आधार पर जो कहा गया है कि वे स्प्रिंट बैकलॉग नामक कुछ के साथ आते हैं, जो अब बैकलॉग फैलाता है जब आपकी विकास टीम वास्तव में इसमें शामिल हो जाती है क्योंकि अब आपके पास पहले से ही एक संगठित और प्राथमिकता वाली उपयोगकर्ता कहानियां हैं, जिन्हें आप काम करने वाले हैं, तो दस अलग -अलग चीजों पर सिर्फ एक ही समय में आपको डंप नहीं किया जाता है, एक ही समय में आपको एक तार्किक और उचित दिया जाता है ऐसे कार्य जिन्हें एक समय में एक निष्पादित किया जाना है और एक बार जब उनके पास एक स्प्रिंट बैकलॉग होता है, तो आप वास्तव में इस पर एक विकास के रूप में काम करना शुरू कर सकते हैं अब मैं इस सुंदर ड्राइंग से छुटकारा पाऊंगा जो अब के लिए बनाई गई हैं, तो बस बस एक स्प्रिंट को देखें बैकलॉग लेकिन आप जानते हैं कि यह हिस्सा उस एप्लिकेशन में इकट्ठा होने के लिए तैयार है जो आपके पास है इसलिए यह विचार हर दो सप्ताह के अंत में है आपके पास आवेदन का एक शिप करने योग्य हिस्सा है जो डी होने के लिए तैयार है एक विशाल एप्लिकेशन को काम करने के बजाय एक साल में एक साल लग गया होगा, जो अब भी एक साल लग गया होगा, अब आप इसे उन चीजों में तोड़ देते हैं जो वास्तव में दो सप्ताह में भेजे जा सकते हैं, जो उन प्राथमिकताओं के आधार पर हैं जो उत्पाद के मालिक और स्क्रैम मास्टर द्वारा निर्धारित किए गए हैं। क्या यह है कि कार्यों के कोयले के छोटे हिस्से के छोटे हिस्से में सब कुछ तोड़ने का विचार है, ताकि हर कोई जानता हो कि वास्तव में वे क्या करने वाले हैं जो कि इसके लिए इसे सही करने के लिए सही है, आपके पास एक विधि है जो एक विशिष्ट सबसे अच्छा सेट है प्रथाएं जो आप तकनीकी पक्ष के साथ अनुसरण करते हैं क्योंकि आपके पास एक तेजी से तैनाती है जिस क्षण आप एक कोड लिखते हैं आप वास्तव में इसे देव वातावरण में परीक्षण कर सकते हैं अब यही वह जगह है जहां लोग मेरे जैसे लोग चित्र में आते हैं लेकिन विचार यह है कि आपको वास्तव में एक महीने के लिए इंतजार नहीं करना पड़ेगा कि आप इसे अभी क्या कोड करते हैं यदि आप अभी कोड को धक्का देते हैं, तो आप वास्तव में देव वातावरण में काम करते हुए देखेंगे ताकि यह तकनीकी पक्ष होआपके पास यह पता लगाने के लिए त्वरित प्रतिक्रिया है कि क्या आपको आगे बढ़ना है या आप जानते हैं कि क्या आपको उस कोड में कुछ बदलाव करना है जो आपके पास अभी है जो अभी है कि क्रम्ब और फुर्तीदर्शन या रूपरेखा तो आपके पास कुछ ऐसा है जिसे एक्सट्रीम प्रोग्रामिंग कहा जाता है, अब यह उन लोगों में से एक था जो डेवलपर्स का एक समूह 2001 में वापस आया था इसलिए वे चुस्त विकास के विचार के साथ आए थे, वे सर्वोत्तम प्रथाओं के एक सेट के साथ आए थे और फिर उन्होंने एक प्रकट भी हस्ताक्षर किए, इसलिए वे वास्तव में एक प्रकट के साथ आए थे कि आप जानते हैं कि ये चीजें हैं जिनका हमें अनुसरण करना चाहिए उद्योग ये सर्वोत्तम प्रथाएं हैं और ये सिद्धांत हैं और उन्होंने यहां तक ​​कि इस पर हस्ताक्षर किए हैं, इसलिए चरम प्रोग्रामिंग लगभग कुछ दशकों से है और स्क्रैम चरम प्रोग्रामिंग के अगले पुनरावृत्ति की तरह है, यह एक अलग अलग है ताकि आप इसे एक रूपरेखा कह सकें आप इसे एक दर्शन या कार्यप्रणाली कह सकते हैं अब यह वास्तव में आप पर निर्भर करता है कि आप उस शब्द को जानते हैं जिसका आप उपयोग करना चाहते हैं, लेकिन दिन के अंत में यह फिर से एक डेवलपर केंद्रित और लोग केंद्रित बनने की कोशिश कर रहा है और सभी को यह सुनिश्चित करने के लिए सर्वोत्तम प्रथाओं की स्थापना करता है कि टीम को ठीक-ठीक पता है कि वे क्या करने वाले हैं और आपके पास एक क्रॉस-फंक्शनल टीम है जब मैं क्रॉस-फंक्शनल अनिवार्य रूप से कहता हूं कि मुझे पूरा यकीन है कि अगर आप इस वीडियो को देख रहे हैं, क्योंकि आपके पास कुछ अन्य डेवेलो हैं। pment का अनुभव और यदि आप करते हैं तो आप इस बिंदु पर सही हो जाते हैं जब आप किसी से बात करते हैं ठीक है, आपने उस सुविधा को देखा है और हमने कोड को देखा है और वह आदमी ऐसा होगा जैसे आप जानते हैं कि कोड मुझे चिंता नहीं करता है कि यह कोई नहीं है मेरी चिंता में मैं कुछ पूरी तरह से अलग काम कर रहा हूं, आप जानते हैं कि हम उस तरह के विकास के लिए उपयोग किए जाते हैं, जहां लोग व्यक्तिगत रूप से जानते हैं कि वे क्या करने वाले हैं और वे इस बात से भी चिंतित नहीं हैं कि दूसरा व्यक्ति अब क्या कर रहा है यह समय है हम वास्तव में सिलोस को सिर्फ इसलिए तोड़ते हैं क्योंकि आप उस हिस्से को कोडित नहीं कर रहे हैं, इसका मतलब यह नहीं है कि कोड उस कोड के उस हिस्से की चिंता नहीं करता है जिसे आप लिख रहे हैं इसलिए हर किसी को एक साथ आना होगा और उसी एप्लिकेशन पर काम करना होगा जो कि आप ' स्क्रैम उदाहरण में एक क्रॉस-फंक्शनल टीम को कॉल करें, जब आपके पास उपयोगकर्ता की कहानियाँ और बैकलॉग हैं, जिन्हें आप अगले दो हफ्तों में काम करने वाले हैं, तो यह वास्तव में कोई फर्क नहीं पड़ता कि आप टीम में क्या भूमिका निभाते हैं, यह आपकी टीम की जिम्मेदारी है यह सुनिश्चित करने के लिए कि टी वह कार्य पूरा हो गया है और कार्य को भी समयरेखा को ध्यान में रखते हुए डिज़ाइन किया जा रहा है उदाहरण के लिए बैठक में आपने आवेदन का 20% विकसित किया और आपका अंतिम उपयोगकर्ता या आपका ग्राहक एक बेहतर विचार के साथ वापस आ गया या यदि उन्हें कुछ संशोधनों की आवश्यकता है, तो वे परिवर्तन हैं तो आपके पास आपके UNT परीक्षण हैं आपके पास क्लाइंट साइड ड्यूटी परीक्षण और स्वीकृति है इसके अंत में यह चरम प्रोग्रामिंग विचार कुछ हद तक स्क्रैम के समान हैं, लेकिन दिन के अंत में इन सभी दर्शन डेवलपर्स के जीवन को अंतिम उपयोगकर्ताओं को बेहतर बनाने की कोशिश कर रहे हैं और तकनीकीताओं पर समझौता नहीं कर रहे हैं, बल्कि शिप करने योग्य उत्पाद को बेहतर और तेजी से बनाते हैं। यह विचार सब ठीक चलते हैं, तो आपके पास दुबला प्रोग्रामिंग है, इसलिए दुबला सिद्धांत यहां तक ​​कि यह कुछ समय के लिए भी हो गया है, इसलिए अपशिष्ट को समाप्त कर दें। सीखने का निर्णय जितना संभव हो उतना तेजी से तय करें जितना संभव हो उतना तेजी से मुझे यकीन है कि हम सभी या कम से कम हम में से अधिकांश नेटफ्लिक्स के बारे में जानते हैं अब आपको यह जानकर आश्चर्य होगा कि नेटफ्लिक्स अपने उत्पादन में हर दिन 1,000 से अधिक परिवर्तनों को आगे बढ़ा रहा है tions यदि आप वास्तव में एक नेटफ्लिक्स विकास टीम में काम करते हैं, तो आपको पता होगा कि ये लोग हर दिन उत्पादन में एक हजार बदलाव कर रहे हैं, अब आपको कैसे लगता है कि यह संभव है कि वे इसे उत्पादन के लिए नहीं कर रहे हैं, इसके बिना इसकी समीक्षा किए बिना भी सभी के साथ भी इसका परीक्षण करें। उन चीजों में से, वे कैसे हर दिन 1,000 से अधिक परिवर्तनों को तैनात करने में सक्षम हैं, ये बहुत कम बदलाव हो सकते हैं जैसे कि आप जानते हैं कि कुछ यूआई कुछ डेटाबेस को ठीक करता है कुछ भुगतान प्रक्रिया और ठीक करता है इसलिए हम वास्तव में इस बारे में चिंतित नहीं हैं कि परिवर्तन क्या हैं लेकिन क्या हैं लेकिन मैं इस तथ्य के लिए जानता हूं कि यह वह संख्या है जो उन परिवर्तनों की मात्रा है जो वे वास्तव में हर दिन धक्का देते हैं जो संभव है क्योंकि आपका मतलब है कि चपलता से तेजी से तैनाती या एक जार बनकर ताकि चपलता का स्तर आप वास्तव में उस क्षण को प्राप्त कर सकते हैं जो आपके पास है। संगठित टीम जो एक जार के सिद्धांतों पर काम कर रही है, अब स्पष्ट रूप से बाहरी कारक हैं जैसे आप जानते हैं कि आपका बुनियादी ढांचा कैसे है तो ये एक नौकरी के विचार हैं अब मुझे आशा है कि मुझे यह स्पष्ट कर दिया गया था कि मैं आपकी टीम को एक बेहतर विकास टीम बनने में कैसे मदद कर सकता हूं, इसलिए आईटी के तीन पहलुओं को सही दार्शनिक तकनीकी है और जिस तरह से सॉफ्टवेयर का निर्माण किया गया है, वह दार्शनिक है जो सर्वोत्तम प्रथाओं है। जैसे आप अपनी टीम को कैसे परिभाषित करते हैं कि कौन एक स्क्रैम मास्टर है जो एक उत्पाद स्वामी है जो टीम है जो एक स्प्रिंट है जो वे कार्य हैं जो आप करने वाले हैं, तो आपके पास तकनीकी पक्ष है जैसे कि यदि आप एक कोड का निर्माण करते हैं तो वास्तव में कैसे क्या आप स्वचालित रूप से कोड को तैनात कर सकते हैं कि आप कोड की समीक्षा कैसे कर सकते हैं कि आप कोड को स्वचालित रूप से कैसे परीक्षण कर सकते हैं और फिर इसका एक सॉफ्टवेयर विकास पहलू है कि आप सूक्ष्म सेवाओं के विचार की ओर एक अखंड अनुप्रयोग से दूर जा रहे हैं, इसलिए ये तीन हैं पहलू जो समानांतर रूप से आगे बढ़ते हैं और दिन के अंत में यह आपको मन की शांति देता है यह आपके उत्पाद प्रबंधक को मन की शांति देता है और अंतिम उपयोगकर्ता तैनाती के बेहतर विचारों के साथ मन की शांति देता है ताकि आप वास्तव में हवलदार न हो ई 10 अलग -अलग डेस्क के आसपास दौड़ने के लिए पुष्टि करता है कि क्या आपके परिवर्तन वास्तव में तैनात हैं या नहीं, इसलिए यह सब कुछ है जो मेरे पास है अगर आपके पास कोई प्रश्न हैं तो एड यूरेका के संपर्क में आने के लिए स्वतंत्र महसूस करें मुझे पूरा यकीन है कि आप संपर्क विवरण कहीं आसपास पाएंगे। यह वीडियो और आपके समय के लिए बहुत बहुत धन्यवाद आप सभी के पास एक अच्छा दिन है और भागों को तो यदि आपका काम इसे बनाना है और मान लें कि आपके सहकर्मी ने इस विरोध को इस क्षण को हटा दिया है, जिस समय आप इस पहले आइटम को परीक्षण में धकेलते हैं, तो आप एक और आइटम इस पहले आइटम को बदल देंगे ताकि आप जान सकें कि अगली चीज क्या है जो आप करने वाले हैंइसलिए कांबन सॉफ्टवेयर विकास के निरंतर कार्यान्वयन की तरह है, इसलिए आप सामान्य रूप से चपलता से मतलब है, भले ही आप इसके बारे में सोचते हैं कि अंग्रेजी शब्द चपलता का मतलब है कि वास्तव में तेजी से सही चपलता का मतलब होगा कि आप जो भी कर रहे हैं वह हो रहा हैतेजी से उत्तराधिकार में।.